// Generated by CoffeeScript 1.4.0
var interacData, locker,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

locker = $('.locker-container');

interacData = new ((function() {

  function _Class() {
    this.rotate = __bind(this.rotate, this);

  }

  _Class.prototype.dial = null;

  _Class.prototype.mouseDown = false;

  _Class.prototype.angle = 0;

  _Class.prototype.factor = 2;

  _Class.prototype.acc = 0;

  _Class.prototype.whichDial = function() {
    return this.dial;
  };

  _Class.prototype.setDial = function(dial) {
    this.dial = dial;
  };

  _Class.prototype.rotate = function() {
    var _ref;
    if (!this.dial) {
      return;
    }
    if (!this.mouseDown && this.acc === 0) {
      return;
    }
    if (!this.mouseDown) {
      if ((-5 < (_ref = this.acc) && _ref < 5)) {
        this.acc = 0;
      } else if (this.acc > 0) {
        this.acc -= 5;
      } else if (this.acc < 0) {
        this.acc += 5;
      }
    }
    this.angle = this.angle - this.factor * this.acc;
    return this.dial.css({
      '-webkit-transform': "rotate(" + this.angle + "deg)",
      '-moz-transform': "rotate(" + this.angle + "deg)",
      '-ms-transform': "rotate(" + this.angle + "deg)",
      'transform': "rotate(" + this.angle + "deg)"
    });
  };

  return _Class;

})());

locker.on('mousedown', function(ev) {
  var lastKnown, _this;
  ev.preventDefault();
  _this = this;
  lastKnown = null;
  interacData.setDial($(this));
  interacData.mouseDown = true;
  return $(document).on('mousemove', function(e) {
    e.preventDefault();
    if (lastKnown) {
      if (e.pageX < lastKnown.x) {
        interacData.acc += 0.7;
      } else {
        interacData.acc -= 0.7;
      }
    }
    return lastKnown = {
      x: e.pageX
    };
  });
});

$(document).on('mouseup', function(e) {
  e.preventDefault();
  interacData.mouseDown = false;
  return $(document).off('mousemove');
});

setInterval(interacData.rotate, 200);
